@model FinalGroupProjectTeam8.Models.BankAccountDetailsViewModel
@{
    ViewBag.Title = "Account Details";
}


<!-- Show balance -->
<h2>@Model.BankAccount.Name</h2>
<p>Balance: @Model.BankAccount.Balance</p>
<hr />


<!-- <button class="btn-btn-primary" data-toggle="collapse" data-target="#search-form">Search</button> -->
<p>
    <a class="btn btn-primary" data-toggle="collapse" data-target="#search-form">Search</a>
    <a class="btn btn-primary" href="/Transactions/CreateTransaction">Create new transaction</a>
</p>

<!-- Advanced Search -->
@using (Html.BeginForm("Details", "BankAccount", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div id="search-form" class="form-horizontal collapse">

        <div class="form-group">
            @Html.LabelFor(model => model.BankAccountID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BankAccountID, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control", @Value = Model.BankAccountID } })
                @Html.ValidationMessageFor(model => model.BankAccountID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransactionID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TransactionID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TransactionID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DescriptionFilter, "Description", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DescriptionFilter, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DescriptionFilter, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransactionType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.TransactionType, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TransactionType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AmountLowerBound, "Lower Bound Amount", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AmountLowerBound, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AmountLowerBound, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AmountUpperBound, "Upper Bound Amount", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AmountUpperBound, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AmountUpperBound, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateLowerBound, "Lower Bound Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateLowerBound, new { htmlAttributes = new { @class = "form-control", @Value = Convert.ToString("") } })
                @Html.ValidationMessageFor(model => model.DateLowerBound, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateUpperBound, "Upper Bound Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateUpperBound, new { htmlAttributes = new { @class = "form-control", @Value = Convert.ToString("") } })
                @Html.ValidationMessageFor(model => model.DateUpperBound, "", new { @class = "text-danger" })
            </div>
        </div>

        @*gender radio buttons*@
        @*<div class="form-group">
            <div class="form-check">
                <label class="form-check-label">
                    @Html.RadioButton("SelectedGender", Amount.All, true, new { @class = "form-check-input" }) All
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label">
                    @Html.RadioButton("SelectedGender", Gender.Male, new { @class = "form-check-input" }) Male
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label">
                    @Html.RadioButton("SelectedGender", Gender.Female, new { @class = "form-check-input" }) Female
                </label>
            </div>
        </div>*@


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Search" class="btn btn-default" />
                <div class="btn btn-default">
                    @Html.ActionLink("Show All", "Details", "BankAccount", new { BankAccountID = Model.BankAccountID }, null)
                </div>
            </div>
        </div>



    </div>
}

<!-- Show list of transactions -->
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Transactions.First().Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Transactions.First().TransactionType)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Transactions.First().Amount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Transactions.First().TransactionID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Transactions.First().Date)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Transactions.First().Comments)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Transactions.First().TransactionStatus)
        </th>
        <th>
            Other Notes
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Transactions)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TransactionType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Amount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TransactionID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Comments)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TransactionStatus)
            </td>
            <td>
                 @{
                    foreach (var dispute in item.Disputes)
                    {
                        if (dispute.DisputeType == FinalGroupProjectTeam8.Models.DisputeTypeEnum.Submitted)
                        {
                            @:<span style="color:red;">Dispute<b> @dispute.DisputeType.ToString()
                            @:</b></span>
                            @:<a href="../Disputes/Details/
                            @dispute.DisputeID
                            @:">Here</a>
                        }
                        else {
                            @:Dispute<b> @dispute.DisputeType.ToString()
                            @:</b>
                            @:<a href="../Disputes/Details/
                            @dispute.DisputeID
                            @:">Here</a>
                        }
                    }
                }
                @if (item.TransactionType == FinalGroupProjectTeam8.Models.Transaction.TransactionTypeEnum.Transfer)
                {
                    @:Sent from @item.BankAccountID to 
                    // @((FinalGroupProjectTeam8.Models.Transfer) item).ReceivingBankAccountID
                }
            </td>
            <td>
                @Html.ActionLink("Details", "Details", "Transactions", new { TransactionID = item.TransactionID }, null) | 

                @{ 
                    Boolean includeDisputeLink = true;
                    foreach (var dispute in item.Disputes) {
                        if (dispute.DisputeType == FinalGroupProjectTeam8.Models.DisputeTypeEnum.Submitted) {
                            @:<span style="color:red;">Disputed</span>
                            includeDisputeLink = false;
                            break;
                        }
                    }
                    if (includeDisputeLink && Model.AllowDisputeCreation)
                    {
                        @Html.ActionLink("Dispute", "CreateDispute", "Disputes", new { TransactionID = item.TransactionID }, null);
                    }
                    else if (includeDisputeLink && !Model.AllowDisputeCreation) {
                        @: Dispute (N/A)
                    }
                }
            </td>
        </tr>
    }
</table>



